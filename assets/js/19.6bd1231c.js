(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{544:function(t,s,a){"use strict";a.r(s);var n=a(7),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"规则引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#规则引擎"}},[t._v("#")]),t._v(" 规则引擎")]),t._v(" "),a("ul",[a("li",[t._v("规则引擎是为了动态解决业务逻辑")]),t._v(" "),a("li",[t._v("规则引擎由多个Actor 组成，每个Actor 是最基本的功能执行单元，eg: 发送 邮件是一个actor,连接数据库是一个actor，生成邮件报文是一个actor")])]),t._v(" "),a("h2",{attrs:{id:"基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Actor 介绍")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Actor 之间是通过消息进行通信，且消息是不可变的")])]),t._v(" "),a("li",[a("p",[t._v("Actor 之间是隔离状态")])]),t._v(" "),a("li",[a("p",[t._v("Actor 和自己的MailBox 进行绑定，接受对方发送的消息")])]),t._v(" "),a("li",[a("p",[t._v("Actor 的行为就是处理MailBox 消息并作出响应")])]),t._v(" "),a("li",[a("p",[t._v("Actor 的响应有：改变自身数据，发送消息到其他Actor或者创建子Actor")])])])])]),t._v(" "),a("p",[t._v("综上所述 Actor 应该有的抽象方法")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("processMsg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActorMsg")]),t._v(" msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 处理具体消息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActorRef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getActorRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取当前Actor对象引用")]),t._v("\ninit "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("destroy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 销毁")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 额外处理 初始化是被和消息处理失败")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" onFailure "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActorMsg")]),t._v(" msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("​")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Akka Actor")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Actor是Akka 生态的核心模块，Akka框架的主要特点是 高并发、分布式、弹性、消息驱动、基于JVM")])]),t._v(" "),a("li",[a("p",[t._v("Akka 使用ActorSystem 来管理Actor，创建Actor 是自上而下的,管理包括消息传递,定义方法包括以下基本方法,可以根据配置加载更多功能")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActorRef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getActor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActorId")]),t._v(" id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取Actor")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActorRef")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createChildActor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" dispatcherId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActorCreator")]),t._v(" creator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActorId")]),t._v(" parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建actor")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tell")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActorId")]),t._v(" target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActorMsg")]),t._v(" actorMsg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 传递消息")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActorRef")]),t._v(" actorRef"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 停止actor")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("ActorRef：  Actor引用，Actor实例视为不可变，通过ActorRef操作东西，比如向Actor 发送消息，综上所述，ActorRef 应该具有抽象方法：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ActorId")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getActorId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取 ActorId ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tell")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DlActorMsg")]),t._v(" actorMsg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 消息传递")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("ActorContext： Actor上下文，上下文中维护了Actor 的实际层级，比如返回self ,parent,children。当然返回的是ActorRef。")])]),t._v(" "),a("li",[a("p",[t._v("Akka 提供一些hook,重写这些hook 方法可以管理Actor生命周期")])]),t._v(" "),a("li",[a("p",[t._v("Dispatcher 调度器，负责将Actor和与其关联的邮箱中消息调度到线程中处理")])])])]),t._v(" "),a("li",[a("p",[t._v("Spring 条件注解")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("@Conditional 条件注解是Spring4 提供的注解，作用是通过某种条件创建特定的Bean,我们可以使用衍生的注解，比如"),a("strong",[t._v("ConditionalOnProperty")]),t._v(" 根据指定属性值，常用于配置文件判断，"),a("strong",[t._v("@ConditionalOnExpression")]),t._v(" 基于Spel 表达式的条件判断，"),a("strong",[t._v("@ConditionalOnBean")]),t._v(" 通过当上下文中存在Bean 时候触发")])]),t._v(" "),a("li",[a("p",[t._v("也可以通过实现Condition 接口重写matches 条件来实现自定义匹配")])])])])]),t._v(" "),a("h2",{attrs:{id:"初始化过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化过程"}},[t._v("#")]),t._v(" 初始化过程")]),t._v(" "),a("ul",[a("li",[t._v("定义ActorService Bean 进行初始化操作，ActorService 需要完成的功能\n"),a("ul",[a("li",[t._v("初始化ActorSystem实例，实例名：system")]),t._v(" "),a("li",[t._v("初始化 ActorContext 上下文 记录下面创建Actor 过程中的层级关系")]),t._v(" "),a("li",[t._v("初始化顶级Actor ,并调用Actor init 方法 创建子Actor（一般流程是：首先创建系统根 appActor,然后appActor 创建用户UserActor(公用可省略)，用户创建Actor 组成的业务链 ChainActor,单独的chainActor 去创建单独节点 ）")])])])]),t._v(" "),a("h2",{attrs:{id:"消息流传"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息流传"}},[t._v("#")]),t._v(" 消息流传")]),t._v(" "),a("p",[t._v("​    消息流传自上而下过程：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("整体流程：消息由外部系统传入到Actor 组成的业务链（chainActor），也可以直接从app ---\x3euser---\x3echain---\x3e actorNode")])]),t._v(" "),a("li",[a("p",[t._v("传递细节实现方案：如果Lazy 方案 传递消息过程中 先使用 ActorSystem 创建子Actor,如果不是Lazy 使用ActorContext 中存储的层级关系直接获取到 targetActor 的ActorRef 将消息传递到目标Actor 的MailBox")])])]),t._v(" "),a("h2",{attrs:{id:"消息处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息处理"}},[t._v("#")]),t._v(" 消息处理")]),t._v(" "),a("p",[t._v("上面提到Actor 都是先了processMsg(ActorMsg msg) 处理过程中会使用消息类型做不同的业务区分")]),t._v(" "),a("h2",{attrs:{id:"消息返回和异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息返回和异常处理"}},[t._v("#")]),t._v(" 消息返回和异常处理")]),t._v(" "),a("p",[t._v("消息返回和异常处理过程在上述中已经提到了，消息的返回和异常处理就是使用tell() 方法传递消息。大致伪代码如下：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("processMsg(ActorMsg msg) {\n\tdoProcess(msg);\n}\ndoProcess(ActroMsg msg) {\n\tswith(msg.type){\n\t\t// 业务逻辑\n\t}\n\t// 传递到下一个节点，或者父节点来调度消息\n\ttell (targetId,msg)\n}\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[a("em",[t._v("实现代码逻辑置于非理论知识部分")])])])}),[],!1,null,null,null);s.default=r.exports}}]);